--Lachlan Moore, 30030228
-- CPSC 449, Fall 2019
-- Exercise 2


--1. twoTautology and twoEquiv



--2. Shows Fermat's conjecture is false by finding a number for which it is not true
badFermat :: Integer
badFermat = bfHelper 1
   where
      ex n = 2^(2^n) + 1
      bfHelper n
         | isPrime (ex n) = bfHelper (n+1)
         | otherwise = n


isPrime :: Integer -> Bool
isPrime n = case (filter (\x -> (n `mod` x) == 0) [2..(n-1)]) of
            [] -> True
            (a:as) -> False

cartProd :: [a] -> [b] -> [(a,b)]
cartProd xs ys = [(x,y) | x <- xs, y <- ys]

allTwoBools :: [(Bool, Bool)]
allTwoBools = cartProd [True, False] [True, False]

--3. collatz and  collatzIndex
data SF a = SS a |  FF
     deriving (Eq,Show)

collatz :: Int -> Int
collatz n
   | even (n) = (n `div` 2)
   | otherwise = (3 * n) + 1

collatzIndex :: Int -> SF [Int]
collatzIndex n
   | n < 1 = FF
   | n == 1 = SS [n]
   | otherwise = SS (chelper(n))

chelper :: Int -> [Int]
chelper n
   | n == 1 = [1]
   | otherwise = n:chelper (collatz n)

--4. Bisection method to find roots to continuous functions
bisection :: (Double -> Double) -> (Double, Double) -> Maybe Double
bisection = undefined

--5. Quick, Bubble and Merge sort in haskell

--Quick sort
qsort :: (a -> a -> Bool) -> [a] -> [a]
qsort f [] = []
qsort f (x:xs) = smaller ++ [x] ++ larger
   where
      smaller = qsort f [a | a <- xs, f a x]
      larger = qsort f [a | a <- xs, f x a]

--Bubble sort
bsort :: (a -> a -> Bool) -> [a] -> [a]
bsort f xs
   | isSorted f (xs) == True = xs
   | otherwise = bsort f (bubble f xs)
      
bubble :: (a -> a -> Bool) -> [a] -> [a]
bubble f [] = []
bubble f (x:[]) = x:[]
bubble f (x:(y:ys))
   | f x y = x:(bubble f (y:ys)) 
   | otherwise = y:(bubble f (x:ys))
      
isSorted :: (a -> a -> Bool) -> [a] -> Bool
isSorted f [] = True
isSorted f [x] = True
isSorted f (x:(y:ys)) 
   | f x y = isSorted f (y:ys) 
   | otherwise = False

-- Merge Sort
msort :: (a -> a -> Bool) -> [a] -> [a]
msort f []  = []
msort f [x] = [x]
msort f xs  = merge f firstHalfSorted secondHalfSorted
     where firstHalfSorted  = msort f . fst $ halves
           secondHalfSorted = msort f . snd $ halves
           halves           = splitAt halfPoint xs
           halfPoint        = length xs `div` 2
   
merge :: (a -> a -> Bool) -> [a] -> [a] -> [a]
merge f [] ys = ys
merge f xs [] = xs
merge f (x:xs) (y:ys) 
   | f x y     = x : merge f xs (y:ys)
   | otherwise = y : merge f (x:xs) ys

--6. Matrix functions
type Matrix a = [[a]]
type DoubleMatrix = Matrix Double

transpose :: Matrix a -> (Maybe (Matrix a))
transpose ([]:_) = Nothing
transpose x = Just (thelp(x))

thelp :: Matrix a -> Matrix a
thelp ([]:_) = []
thelp x = (map head x) : thelp (map tail x)

addMat :: DoubleMatrix -> DoubleMatrix -> (Maybe DoubleMatrix)
addMat [] [] = Nothing
addMat x y = Just (ahelp x y)

ahelp :: DoubleMatrix -> DoubleMatrix -> DoubleMatrix
ahelp [] [] = []
ahelp (x:xs) (y:ys) = zipWith (+) x y : ahelp xs ys

multMat :: DoubleMatrix -> DoubleMatrix -> (Maybe DoubleMatrix)
multMat [] [] = Nothing
multMat a b = Just (mhelp a b)

mhelp :: DoubleMatrix -> DoubleMatrix -> DoubleMatrix
mhelp [] [] = []
mhelp a b = [ [sum $ zipWith (*) ar bc | bc <- (thelp b) ] | ar <- a]

--7. naive reverse, fast reverse and higher-order reverse
nreverse :: [a] -> [a]
nreverse [] = []
nreverse (x:xs) = (nreverse xs) ++ [x]

freverse :: [a] -> [a]
freverse xs = shunt xs []
   where
      shunt :: [a] -> [a] -> [a]
      shunt [] ys = ys
      shunt (x:xs) ys = shunt xs (x:ys)

hreverse :: [a] -> [a]
hreverse as = foldr (\ a f -> (\x -> f(a:x))) id as []

--8. Function to determine whether a tree is a AVL tree


--9. Factorial stuffs
--According to fact6, the factorial of 1891 is:
{-102393079373180920359357159982679099161059240
69923343459039300333411621494047196793583130301
03629307499537675502273121155012574786008799074
53526732348139697879240205809193824182578272238
54694741414145272812233163035960972210319391171
70971988513144026401092552275093182455317790246
07348051389861579406259377013866142006022846898
64451331888148443348564966241299603555158461479
47831765269435138485762951063246474300957380291
77895198348132973882545279430102705921165879806
72569418023668242209715447737881835639824653785
25987742797110217162191502240942234194249374247
60005499048266371432317608721923502826145594118
93441496229351572660290220715006567142583420221
51372761935167200792043446480560883858696415787
06984664891613361715069592270495185233976476690
23394677236158197225222744571496961539740603251
92815145653820898593939518654305231309477801807
76248740345154932280886678623091653979464500870
21486891382934430586271069345937594868962198665
80185649199064147510345917253941542653977008615
75315354536323468086647506568824458401293720103
54860789796027307398918992947134216105576644212
72971986633401453254377133465073597407253428861
52638883603140928054222081817501639786883189593   it keeps going but I got lazy and didnt want to space this more
}
--6 ways to program a way to calculate factorials are shown below
--Product of 1 to n
fact1 :: Integer -> Integer
fact1 n = product [1..n] 

--Using compostion
--fact2 :: Integer -> Integer
--fact2 product.enumFromTo 1

--Recursion without libary functions
fact3 :: Integer -> Integer
fact3 0 = 1
fact3 n = n * fact3 (n - 1)

--Tail-recursive
fact4 :: Integer -> Integer
fact4 n
   | n >= 0 = go 1 n
   | otherwise = error "Negative factorial"
      where go acc 0 = acc
            go acc n = go (acc * n) (n - 1)

--With a left fold
fact5 :: Integer -> Integer
fact5 n = foldl (*) 1 [1..n]

--With a right fold
factorial6 :: Integer -> Integer
factorial6 n = foldr(\x g n -> g (x*n)) id [1..n] 1

fact7 :: Int -> Int
fact7 n = facs !! n
   where
      facs = scanl (*) 1 [1..]